(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{193:function(t,v,r){"use strict";r.r(v);var e=r(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("div",{staticClass:"content"},[r("p",[t._v("*github")]),t._v(" "),r("ol",[r("li",[t._v("github是一个项目托管平台")]),t._v(" "),r("li",[t._v("github支持两种协议：https ssh\nssh协议：需要配置公钥和秘钥。\nssh-keygen  生成公钥秘钥。\nhttps协议：需要用客户名和密码")])]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("命令")]),t._v(" "),r("th",[t._v("意义")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("git remote add origin 地址")]),t._v(" "),r("td",[t._v("连接仓库")])]),t._v(" "),r("tr",[r("td",[t._v("git remote -v")]),t._v(" "),r("td",[t._v("查看仓库")])]),t._v(" "),r("tr",[r("td",[t._v("git push -u origin maseter")]),t._v(" "),r("td",[t._v("本地版本库所有的修改提交到网上")])]),t._v(" "),r("tr",[r("td",[t._v("git pull origin master")]),t._v(" "),r("td",[t._v("把远程仓库的代码拉取到本地仓库")])]),t._v(" "),r("tr",[r("td",[t._v("git branch 分支名")]),t._v(" "),r("td",[t._v("新建分支")])]),t._v(" "),r("tr",[r("td",[t._v("git branch")]),t._v(" "),r("td",[t._v("查看本地的分支")])]),t._v(" "),r("tr",[r("td",[t._v("git checkout 分支名")]),t._v(" "),r("td",[t._v("切换分支")])]),t._v(" "),r("tr",[r("td",[t._v("git checkout -b 分支名")]),t._v(" "),r("td",[t._v("创建并切换分支")])]),t._v(" "),r("tr",[r("td",[t._v("git merge 分支名")]),t._v(" "),r("td",[t._v("合并分支")])]),t._v(" "),r("tr",[r("td",[t._v("git bransh -d 分支名")]),t._v(" "),r("td",[t._v("删除分支")])]),t._v(" "),r("tr",[r("td",[t._v("git branch -a")]),t._v(" "),r("td",[t._v("查看本地和远程所有的分支")])]),t._v(" "),r("tr",[r("td",[t._v("git branch -r")]),t._v(" "),r("td",[t._v("查看远程的分支")])]),t._v(" "),r("tr",[r("td",[t._v("git push origin -d 分支名")]),t._v(" "),r("td",[t._v("删除远程的分支")])])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git merge: 合并代码\ngit pull = git fetch + git merge\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[r("strong",[t._v("gulp.serise(task1,task2,...)")]),t._v(" 设置任务的执行顺序   "),r("strong",[t._v("串行执行")])]),t._v(" "),r("li",[r("strong",[t._v("gulp.parallel(task1,task2,...)")]),t._v(" 设置任务的执行顺序  "),r("strong",[t._v("并行执行")])]),t._v(" "),r("li",[r("strong",[t._v("gulp.watch(globs,gulp.serise/gulp.parallel(task1,task2,...)) 监听文件变化，执行任务")])]),t._v(" "),r("li")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("插件")]),t._v(" "),r("th",[t._v("说明")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("gulp-sass")]),t._v(" "),r("td",[t._v("编译scss")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-less")]),t._v(" "),r("td",[t._v("编译less")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-autoprefixer")]),t._v(" "),r("td",[t._v("添加前缀")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-clean-css")]),t._v(" "),r("td",[t._v("压缩css文件")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-uglify")]),t._v(" "),r("td",[t._v("压缩js")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-webserver")]),t._v(" "),r("td",[t._v("起服务")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-babel")]),t._v(" "),r("td",[t._v("ES6 -> ES5")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-htmlmin")]),t._v(" "),r("td",[t._v("压缩html")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-concat 注意：使用时括号内为合并后的文件名")]),t._v(" "),r("td",[t._v("合并文件")])]),t._v(" "),r("tr",[r("td",[t._v("browser-sync")]),t._v(" "),r("td",[t._v("起服务")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-rev")]),t._v(" "),r("td",[t._v("生成文件后缀")])]),t._v(" "),r("tr",[r("td",[t._v("gulp-rev-collector")]),t._v(" "),r("td",[t._v("替换文件路径")])])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("**防止缓存**\nvar gulp = require('gulp');\nvar rev = require('gulp-rev');\nvar collector = require('gulp-rev-collector');\ngulp.task('rev', function() {\n    return gulp.src('./src/js/index.js')\n        .pipe(rev()) //添加后缀\n        .pipe(gulp.dest('./src/js'))\n        .pipe(rev.manifest()) //生成替换文件 json\n        .pipe(gulp.dest('./src/bulid')) //替换文件json的位置\n})\ngulp.task('collector', function() {\n    return gulp.src(['./src/bulid/*.json', './src/index.html']) //进行替换 先 json 后 html\n        .pipe(collector({\n            replaceRev: true //开始替换\n        }))\n        .pipe(gulp.dest('./src'))\n})\n\n**两种起服务的方式**\ngulp.task('server',functiong(){\n    retuen browserSync{\n       server:{\n            baseDir:'src',\n            middleware:function(){\n                //拦截请求\n            }\n       },\n       port:9090,\n       files:[true] //自动刷新\n    }\n})  \n\n\n\ngulp.task('server',function(){\n    return gulp.src('src')\n    .pipe(server(){\n        port:9090  //设置端口号\n        open:true  //自动打开浏览器\n        livereload:true  //自动刷新浏览器\n        host:   //配置ip的 透过手机来测试\n        fallback:'demo.html'   //指定默认的打开文件\n        middleware:function(req,res,next){  //拦截前端请求\n        var pathname = url.parse(req.url).pathname;\n            if(){\n                \n            }else{\n                \n            }\n        }\n    })\n})\n\n-webkit-overflow-scrolling:touch;\n解决苹果scroll的兼容问题\n")])])])])}],!1,null,null,null);v.default=n.exports}}]);
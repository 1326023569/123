(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{162:function(e,t,a){"use strict";a.r(t);var i=a(0),n=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"react之diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react之diff算法","aria-hidden":"true"}},[e._v("#")]),e._v(" React之diff算法")]),e._v(" "),a("p",[e._v("1、什么是调和？\n将Virtual DOM树转换成actual DOM树的最少操作的过程 称为 调和 。")]),e._v(" "),a("p",[e._v("2、什么是React diff算法？\ndiff算法是调和的具体实现。\ndiff策略")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("策略一（tree diff）：")]),e._v(" "),a("p",[e._v("Web UI中DOM节点跨层级的移动操作特别少，可以忽略不计。")])]),e._v(" "),a("li",[a("p",[e._v("策略二（component diff）：")]),e._v(" "),a("p",[e._v("拥有相同类的两个组件 生成相似的树形结构，\n拥有不同类的两个组件 生成不同的树形结构。")])]),e._v(" "),a("li",[a("p",[e._v("策略三（element diff）：")]),e._v(" "),a("p",[e._v("对于同一层级的一组子节点，通过唯一id区分。")])])]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"tree-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" tree diff")]),e._v(" "),a("p",[e._v("1、React通过updateDepth对Virtual DOM树进行层级控制。")]),e._v(" "),a("p",[e._v("2、对树分层比较，两棵树 只对同一层次节点 进行比较。如果该节点不存在时，则该节点及其子节点会被完全删除，不会再进一步比较。")]),e._v(" "),a("p",[e._v("3、只需遍历一次，就能完成整棵DOM树的比较。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5518628-d60043dbeddfce8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/504/format/webp",alt:"Tree DIF"}})]),e._v(" "),a("p",[e._v("diff只简单考虑同层级的节点位置变换，如果是跨层级的话，只有创建节点和删除节点的操作")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5518628-41118df156ed8d6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/952/format/webp",alt:"Tree DIF"}})]),e._v(" "),a("p",[e._v("如上图所示，以A为根节点的整棵树会被重新创建，而不是移动，因此 官方建议不要进行DOM节点跨层级操作，可以通过CSS隐藏、显示节点，而不是真正地移除、添加DOM节点。")]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"component-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" component diff")]),e._v(" "),a("p",[e._v("React对不同的组件间的比较，有三种策略")]),e._v(" "),a("p",[e._v("1、同一类型的两个组件，按原策略（层级比较）继续比较Virtual DOM树即可。")]),e._v(" "),a("p",[e._v("2、同一类型的两个组件，组件A变化为组件B时，可能Virtual DOM没有任何变化，如果知道这点（变换的过程中，Virtual DOM没有改变），可节省大量计算时间，所以 用户 可以通过 shouldComponentUpdate() 来判断是否需要 判断计算。")]),e._v(" "),a("p",[e._v("3、不同类型的组件，将一个（将被改变的）组件判断为dirty component（脏组件），从而替换 整个组件的所有节点。\n注意：如果组件D和组件G的结构相似，但是 React判断是 不同类型的组件，则不会比较其结构，而是删除 组件D及其子节点，创建组件G及其子节点。")]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"element-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" element diff")]),e._v(" "),a("p",[e._v("当节点处于同一层级时，diff提供三种节点操作：删除、插入、移动。\n插入：组件 C 不在集合（A,B）中，需要插入\n删除：")]),e._v(" "),a("p",[e._v("1、组件 D 在集合（A,B,D）中，但 D的节点已经更改，不能复用和更新，所以需要删除 旧的 D ，再创建新的。")]),e._v(" "),a("p",[e._v("1、组件 D 之前在 集合（A,B,D）中，但集合变成新的集合（A,B）了，D 就需要被删除。\n移动：组件D已经在集合（A,B,C,D）里了，且集合更新时，D没有发生更新，只是位置改变，如新集合（A,D,B,C），D在第二个，无须像传统diff，让旧集合的第二个B和新集合的第二个D 比较，并且删除第二个位置的B，再在第二个位置插入D，而是 （对同一层级的同组子节点） 添加唯一key进行区分，移动即可。")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("重点说下移动的逻辑：")]),e._v(" "),a("ul",[a("li",[e._v("情形一：新旧集合中存在相同节点但位置不同时，如何移动节点")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5518628-89bb3cd6ebdb4296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp",alt:""}})]),e._v(" "),a("p",[e._v("1、看着上图的 B，React先从新中取得B，然后判断旧中是否存在相同节点B，当发现存在节点B后，就去判断是否移动B。\nB在旧 中的index=1，它的lastIndex=0，不满足 index < lastIndex 的条件，因此 B 不做移动操作。此时，一个操作是，lastIndex=(index,lastIndex)中的较大数=1.\n注意：lastIndex有点像浮标，或者说是一个map的索引，一开始默认值是0，它会与map中的元素进行比较，比较完后，会改变自己的值的（取index和lastIndex的较大数）。")]),e._v(" "),a("p",[e._v("2、看着 A，A在旧的index=0，此时的lastIndex=1（因为先前与新的B比较过了），满足index<lastIndex，因此，对A进行移动操作，此时lastIndex=max(index,lastIndex)=1。")]),e._v(" "),a("p",[e._v("3、看着D，同（1），不移动，由于D在旧的index=3，比较时，lastIndex=1，所以改变lastIndex=max(index,lastIndex)=3")]),e._v(" "),a("p",[e._v("4、看着C，同（2），移动，C在旧的index=2，满足index<lastIndex（lastIndex=3），所以移动。\n由于C已经是最后一个节点，所以diff操作结束。")]),e._v(" "),a("ul",[a("li",[e._v("情形二：新集合中有新加入的节点，旧集合中有删除的节点")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5518628-eb7ef5477ea1a678.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/601/format/webp",alt:""}})]),e._v(" "),a("p",[e._v("1、B不移动，不赘述，更新l astIndex=1")]),e._v(" "),a("p",[e._v("2、新集合取得 E，发现旧不存在，故在lastIndex=1的位置 创建E，更新lastIndex=1")]),e._v(" "),a("p",[e._v("3、新集合取得C，C不移动，更新lastIndex=2")]),e._v(" "),a("p",[e._v("4、新集合取得A，A移动，同上，更新lastIndex=2")]),e._v(" "),a("p",[e._v("5、新集合对比后，再对旧集合遍历。判断 新集合 没有，但 旧集合 有的元素（如D，新集合没有，旧集合有、，发现 D，删除D，diff操作结束。")]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[e._v("diff的不足与待优化的地方\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/5518628-aea2bb7e8e843db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/636/format/webp",alt:""}})])]),e._v(" "),a("p",[e._v("看图的 D，此时D不移动，但它的index是最大的，导致更新lastIndex=3，从而使得其他元素A,B,C的index<lastIndex，导致A,B,C都要去移动。\n理想情况是只移动D，不移动A,B,C。因此，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，会影响React的渲染性能。")])])}],!1,null,null,null);t.default=n.exports}}]);